"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[3619],{2978:(e,n,i)=>{i.r(n),i.d(n,{data:()=>s});const s=JSON.parse('{"key":"v-00c2bbfe","path":"/posts/Lab/Lab05.html","title":"CS61a Lab 5","lang":"zh-CN","frontmatter":{"icon":"edit","date":"2022-01-01T00:00:00.000Z","category":["CS61a"],"tag":["Disc"],"summary":"--- icon: edit date: 2022-01-01 category:\\rCS61a; tag:\\rDisc; --- CS61a Lab 5 Data Abstraction, Trees Link to this section: Q1: Couple Implement the function couple, which takes in t","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/posts/Lab/Lab05.html"}],["meta",{"property":"og:site_name","content":"一个普通的网站"}],["meta",{"property":"og:title","content":"CS61a Lab 5"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-08-10T09:06:57.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:tag","content":"Disc"}],["meta",{"property":"article:published_time","content":"2022-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-10T09:06:57.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"Q1: Couple","slug":"q1-couple","children":[]},{"level":2,"title":"Q2: Distance","slug":"q2-distance","children":[]},{"level":2,"title":"Q3: Closer city","slug":"q3-closer-city","children":[]},{"level":2,"title":"Q4: Don\'t violate the abstraction barrier!","slug":"q4-don-t-violate-the-abstraction-barrier","children":[]},{"level":2,"title":"Q5: Finding Berries!","slug":"q5-finding-berries","children":[]},{"level":2,"title":"Q6: Sprout leaves","slug":"q6-sprout-leaves","children":[]},{"level":2,"title":"Q7: Don\'t violate the abstraction barrier!","slug":"q7-don-t-violate-the-abstraction-barrier","children":[]},{"level":2,"title":"Q8: Coordinates","slug":"q8-coordinates","children":[]},{"level":2,"title":"Q9: Riffle Shuffle","slug":"q9-riffle-shuffle","children":[]},{"level":2,"title":"Q10: Add trees","slug":"q10-add-trees","children":[]},{"level":2,"title":"Q11: Successor Tables","slug":"q11-successor-tables","children":[]},{"level":2,"title":"Q12: Construct the Sentence","slug":"q12-construct-the-sentence","children":[]}],"git":{"createdTime":1659336072000,"updatedTime":1660122417000,"contributors":[{"name":"LiPancake","email":"370981991@qq.com","commits":2}]},"readingTime":{"minutes":8.69,"words":2606},"filePathRelative":"posts/Lab/Lab05.md","localizedDate":"2022年1月1日"}')},9846:(e,n,i)=>{i.r(n),i.d(n,{default:()=>ve});var s=i(6252);const t=(0,s._)("h1",{id:"cs61a-lab-5",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#cs61a-lab-5","aria-hidden":"true"},"#"),(0,s.Uk)(" CS61a Lab 5")],-1),l=(0,s._)("h1",{id:"data-abstraction-trees",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#data-abstraction-trees","aria-hidden":"true"},"#"),(0,s.Uk)(" Data Abstraction, Trees")],-1),a=(0,s.Uk)("Link to this section: "),r={href:"https://inst.eecs.berkeley.edu/~cs61a/fa20/lab/lab05/",target:"_blank",rel:"noopener noreferrer"},c=(0,s.Uk)("https://inst.eecs.berkeley.edu/~cs61a/fa20/lab/lab05/"),d=(0,s._)("h2",{id:"q1-couple",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#q1-couple","aria-hidden":"true"},"#"),(0,s.Uk)(" Q1: Couple")],-1),u=(0,s._)("p",null,"Implement the function couple, which takes in two lists and returns a list that contains lists with i-th elements of two sequences coupled together. You can assume the lengths of two sequences are the same. Try using a list comprehension.",-1),o=(0,s._)("div",{class:"custom-container info"},[(0,s._)("p",{class:"custom-container-title"},"Hint"),(0,s._)("p",null,"Hint: You may find the built in range function helpful.")],-1),_=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,"def couple(s, t):\n    \"\"\"Return a list of two-element lists in which the i-th element is [s[i], t[i]].\n\n    >>> a = [1, 2, 3]\n    >>> b = [4, 5, 6]\n    >>> couple(a, b)\n    [[1, 4], [2, 5], [3, 6]]\n    >>> c = ['c', 6]\n    >>> d = ['s', '1']\n    >>> couple(c, d)\n    [['c', 's'], [6, '1']]\n    \"\"\"\n    assert len(s) == len(t)\n    \"*** YOUR CODE HERE ***\"\n")]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),b=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,"def couple(s, t):\n    \"\"\"Return a list of two-element lists in which the i-th element is [s[i], t[i]].\n\n    >>> a = [1, 2, 3]\n    >>> b = [4, 5, 6]\n    >>> couple(a, b)\n    [[1, 4], [2, 5], [3, 6]]\n    >>> c = ['c', 6]\n    >>> d = ['s', '1']\n    >>> couple(c, d)\n    [['c', 's'], [6, '1']]\n    \"\"\"\n    assert len(s) == len(t)\n    \"*** YOUR CODE HERE ***\"\n    a = []\n    for i in range(len(s)):\n        a.append([s[i], t[i]])\n    return a\n\n")]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),m=(0,s._)("h2",{id:"q2-distance",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#q2-distance","aria-hidden":"true"},"#"),(0,s.Uk)(" Q2: Distance")],-1),v=(0,s._)("p",null,"We will now implement the function distance, which computes the distance between two city objects. Recall that the distance between two coordinate pairs (x1, y1) and (x2, y2) can be found by calculating the sqrt of (x1 - x2)**2 + (y1 - y2)**2. We have already imported sqrt for your convenience. Use the latitude and longitude of a city as its coordinates; you'll need to use the selectors to access this info!",-1),h=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,"from math import sqrt\ndef distance(city_a, city_b):\n    \"\"\"\n    >>> city_a = make_city('city_a', 0, 1)\n    >>> city_b = make_city('city_b', 0, 2)\n    >>> distance(city_a, city_b)\n    1.0\n    >>> city_c = make_city('city_c', 6.5, 12)\n    >>> city_d = make_city('city_d', 2.5, 15)\n    >>> distance(city_c, city_d)\n    5.0\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n")]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),f=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,"from math import sqrt\ndef distance(city_a, city_b):\n    \"\"\"\n    >>> city_a = make_city('city_a', 0, 1)\n    >>> city_b = make_city('city_b', 0, 2)\n    >>> distance(city_a, city_b)\n    1.0\n    >>> city_c = make_city('city_c', 6.5, 12)\n    >>> city_d = make_city('city_d', 2.5, 15)\n    >>> distance(city_c, city_d)\n    5.0\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a = (get_lat(city_a) - get_lat(city_b)) ** 2\n    b = (get_lon(city_a) - get_lon(city_b)) ** 2\n    return sqrt(a + b)\n")]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),p=(0,s._)("h2",{id:"q3-closer-city",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#q3-closer-city","aria-hidden":"true"},"#"),(0,s.Uk)(" Q3: Closer city")],-1),y=(0,s._)("p",null,"Next, implement closer_city, a function that takes a latitude, longitude, and two cities, and returns the name of the city that is relatively closer to the provided latitude and longitude.",-1),g=(0,s._)("p",null,"You may only use the selectors and constructors introduced above and the distance function you just defined for this question.",-1),w=(0,s._)("div",{class:"custom-container info"},[(0,s._)("p",{class:"custom-container-title"},"Hint"),(0,s._)("p",null,"Hint: How can you use your distance function to find the distance between the given location and each of the given cities?")],-1),x=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,"def closer_city(lat, lon, city_a, city_b):\n    \"\"\"\n    Returns the name of either city_a or city_b, whichever is closest to\n    coordinate (lat, lon). If the two cities are the same distance away\n    from the coordinate, consider city_b to be the closer city.\n\n    >>> berkeley = make_city('Berkeley', 37.87, 112.26)\n    >>> stanford = make_city('Stanford', 34.05, 118.25)\n    >>> closer_city(38.33, 121.44, berkeley, stanford)\n    'Stanford'\n    >>> bucharest = make_city('Bucharest', 44.43, 26.10)\n    >>> vienna = make_city('Vienna', 48.20, 16.37)\n    >>> closer_city(41.29, 174.78, bucharest, vienna)\n    'Bucharest'\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n")]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),k=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,"def closer_city(lat, lon, city_a, city_b):\n    \"\"\"\n    Returns the name of either city_a or city_b, whichever is closest to\n    coordinate (lat, lon). If the two cities are the same distance away\n    from the coordinate, consider city_b to be the closer city.\n\n    >>> berkeley = make_city('Berkeley', 37.87, 112.26)\n    >>> stanford = make_city('Stanford', 34.05, 118.25)\n    >>> closer_city(38.33, 121.44, berkeley, stanford)\n    'Stanford'\n    >>> bucharest = make_city('Bucharest', 44.43, 26.10)\n    >>> vienna = make_city('Vienna', 48.20, 16.37)\n    >>> closer_city(41.29, 174.78, bucharest, vienna)\n    'Bucharest'\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    temp_city = make_city('temp', lat, lon)\n    if distance(temp_city, city_a) < distance(temp_city, city_b):\n        return get_name(city_a)\n    else:\n        return get_name(city_b)\n")]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),E=(0,s._)("h2",{id:"q4-don-t-violate-the-abstraction-barrier",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#q4-don-t-violate-the-abstraction-barrier","aria-hidden":"true"},"#"),(0,s.Uk)(" Q4: Don't violate the abstraction barrier!")],-1),q=(0,s._)("p",null,"Write a function that takes in a number n and returns a function that can take in a single parameter cond. When we pass in some condition function cond into this returned function, it will print out numbers from 1 to n where calling cond on that number returns True.",-1),R=(0,s._)("div",{class:"custom-container info"},[(0,s._)("p",{class:"custom-container-title"},"Note"),(0,s._)("p",null,"Note: this question has no code-writing component (if you implemented distance and closer_city correctly!)")],-1),C=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,"python ok -q check_city_abstraction\n")]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"})])],-1),D=(0,s._)("h2",{id:"q5-finding-berries",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#q5-finding-berries","aria-hidden":"true"},"#"),(0,s.Uk)(" Q5: Finding Berries!")],-1),Q=(0,s._)("p",null,"The squirrels on campus need your help! There are a lot of trees on campus and the squirrels would like to know which ones contain berries. Define the function berry_finder, which takes in a tree and returns True if the tree contains a node with the value 'berry' and False otherwise.",-1),O=(0,s._)("div",{class:"custom-container info"},[(0,s._)("p",{class:"custom-container-title"},"Hint"),(0,s._)("p",null,"Hint: Considering using a for loop to iterate through each of the branches recursively!")],-1),A=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,"def berry_finder(t):\n    \"\"\"Returns True if t contains a node with the value 'berry' and \n    False otherwise.\n\n    >>> scrat = tree('berry')\n    >>> berry_finder(scrat)\n    True\n    >>> sproul = tree('roots', [tree('branch1', [tree('leaf'), tree('berry')]), tree('branch2')])\n    >>> berry_finder(sproul)\n    True\n    >>> numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])\n    >>> berry_finder(numbers)\n    False\n    >>> t = tree(1, [tree('berry',[tree('not berry')])])\n    >>> berry_finder(t)\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n")]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),U=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,"def berry_finder(t):\n    \"\"\"Returns True if t contains a node with the value 'berry' and \n    False otherwise.\n\n    >>> scrat = tree('berry')\n    >>> berry_finder(scrat)\n    True\n    >>> sproul = tree('roots', [tree('branch1', [tree('leaf'), tree('berry')]), tree('branch2')])\n    >>> berry_finder(sproul)\n    True\n    >>> numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])\n    >>> berry_finder(numbers)\n    False\n    >>> t = tree(1, [tree('berry',[tree('not berry')])])\n    >>> berry_finder(t)\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if label(t) == 'berry':\n        return True\n    else:\n        for branch in branches(t):\n            if berry_finder(branch):\n                return True\n        return False\n")]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),T=(0,s._)("h2",{id:"q6-sprout-leaves",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#q6-sprout-leaves","aria-hidden":"true"},"#"),(0,s.Uk)(" Q6: Sprout leaves")],-1),H=(0,s._)("p",null,"Define a function sprout_leaves that takes in a tree, t, and a list of leaves, leaves. It produces a new tree that is identical to t, but where each old leaf node has new branches, one for each leaf in leaves.",-1),S=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,'def sprout_leaves(t, leaves):\n    """Sprout new leaves containing the data in leaves at each leaf in\n    the original tree t and return the resulting tree.\n\n    >>> t1 = tree(1, [tree(2), tree(3)])\n    >>> print_tree(t1)\n    1\n      2\n      3\n    >>> new1 = sprout_leaves(t1, [4, 5])\n    >>> print_tree(new1)\n    1\n      2\n        4\n        5\n      3\n        4\n        5\n\n    >>> t2 = tree(1, [tree(2, [tree(3)])])\n    >>> print_tree(t2)\n    1\n      2\n        3\n    >>> new2 = sprout_leaves(t2, [6, 1, 2])\n    >>> print_tree(new2)\n    1\n      2\n        3\n          6\n          1\n          2\n    """\n    "*** YOUR CODE HERE ***"\n')]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),W=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,'def sprout_leaves(t, leaves):\n    """Sprout new leaves containing the data in leaves at each leaf in\n    the original tree t and return the resulting tree.\n\n    >>> t1 = tree(1, [tree(2), tree(3)])\n    >>> print_tree(t1)\n    1\n      2\n      3\n    >>> new1 = sprout_leaves(t1, [4, 5])\n    >>> print_tree(new1)\n    1\n      2\n        4\n        5\n      3\n        4\n        5\n\n    >>> t2 = tree(1, [tree(2, [tree(3)])])\n    >>> print_tree(t2)\n    1\n      2\n        3\n    >>> new2 = sprout_leaves(t2, [6, 1, 2])\n    >>> print_tree(new2)\n    1\n      2\n        3\n          6\n          1\n          2\n    """\n    "*** YOUR CODE HERE ***"\n    if is_leaf(t):\n        return tree(label(t), [tree(leaf) for leaf in leaves])\n    else:\n        bs = [sprout_leaves(b, leaves) for b in branches(t)]\n        return tree(label(t), bs)\n')]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),Y=(0,s._)("h2",{id:"q7-don-t-violate-the-abstraction-barrier",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#q7-don-t-violate-the-abstraction-barrier","aria-hidden":"true"},"#"),(0,s.Uk)(" Q7: Don't violate the abstraction barrier!")],-1),L=(0,s._)("p",null,"When writing functions that use an ADT, we should use the constructor(s) and selector(s) whenever possible instead of assuming the ADT's implementation. Relying on a data abstraction's underlying implementation is known as violating the abstraction barrier, and we never want to do this!",-1),K=(0,s._)("p",null,"It's possible that you passed the doctests for berry_finder and sprout_leaves even if you violated the abstraction barrier. To check whether or not you did so, run the following command:",-1),N=(0,s._)("div",{class:"custom-container info"},[(0,s._)("p",{class:"custom-container-title"},"Note"),(0,s._)("p",null,"Note: this question has no code-writing component (if you implemented berry_finder and sprout_leaves correctly!)")],-1),I=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,"python ok -q check_abstraction\n")]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"})])],-1),B=(0,s._)("h2",{id:"q8-coordinates",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#q8-coordinates","aria-hidden":"true"},"#"),(0,s.Uk)(" Q8: Coordinates")],-1),F=(0,s._)("p",null,"Implement a function coords that takes a function fn, a sequence seq, and a lower and upper bound on the output of the function. coords then returns a list of coordinate pairs (lists) such that:",-1),P=(0,s._)("ul",null,[(0,s._)("li",null,"Each (x, y) pair is represented as [x, fn(x)]"),(0,s._)("li",null,"The x-coordinates are elements in the sequence"),(0,s._)("li",null,"The result contains only pairs whose y-coordinate is within the upper and lower bounds (inclusive) See the doctest for examples.")],-1),z=(0,s._)("div",{class:"custom-container info"},[(0,s._)("p",{class:"custom-container-title"},"Note"),(0,s._)("p",null,"Note: your answer can only be one line long. You should make use of list comprehensions!")],-1),M=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,'def coords(fn, seq, lower, upper):\n    """\n    >>> seq = [-4, -2, 0, 1, 3]\n    >>> fn = lambda x: x**2\n    >>> coords(fn, seq, 1, 9)\n    [[-2, 4], [1, 1], [3, 9]]\n    """\n    "*** YOUR CODE HERE ***"\n    return ______\n')]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),Z=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,'def coords(fn, seq, lower, upper):\n    """\n    >>> seq = [-4, -2, 0, 1, 3]\n    >>> fn = lambda x: x**2\n    >>> coords(fn, seq, 1, 9)\n    [[-2, 4], [1, 1], [3, 9]]\n    """\n    "*** YOUR CODE HERE ***"\n    return [[i, fn(i)] for i in seq if upper >= fn(i) >= lower]\n')]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),j=(0,s._)("h2",{id:"q9-riffle-shuffle",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#q9-riffle-shuffle","aria-hidden":"true"},"#"),(0,s.Uk)(" Q9: Riffle Shuffle")],-1),V=(0,s._)("p",null,"The familiar riffle shuffle of a deck of cards (or in our case, of a sequence of things) results in a new configuration of cards in which the top card is followed by the middle card, then by the second card, then the card after the middle, and so forth. Assuming the deck (sequence) contains an even number of cards, write a list comprehension that produces the shuffled sequence.",-1),J=(0,s._)("div",{class:"custom-container info"},[(0,s._)("p",{class:"custom-container-title"},"Hint"),(0,s._)("p",null,"Hint: To write this as a single comprehension, you may find the expression k%2, which evaluates to 0 on even numbers and 1 on odd numbers, to be useful. Consider how you can use the 0 or 1 returned by k%2 to alternatively access the beginning and the middle of the list.")],-1),G=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,'def riffle(deck):\n    """Produces a single, perfect riffle shuffle of DECK, consisting of\n    DECK[0], DECK[M], DECK[1], DECK[M+1], ... where M is position of the\n    second half of the deck.  Assume that len(DECK) is even.\n    >>> riffle([3, 4, 5, 6])\n    [3, 5, 4, 6]\n    >>> riffle(range(20))\n    [0, 10, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19]\n    """\n    "*** YOUR CODE HERE ***"\n    return _______\n')]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),X=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,'def riffle(deck):\n    """Produces a single, perfect riffle shuffle of DECK, consisting of\n    DECK[0], DECK[M], DECK[1], DECK[M+1], ... where M is position of the\n    second half of the deck.  Assume that len(DECK) is even.\n    >>> riffle([3, 4, 5, 6])\n    [3, 5, 4, 6]\n    >>> riffle(range(20))\n    [0, 10, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19]\n    """\n    "*** YOUR CODE HERE ***"\n    # return [deck[i] for i in range(deck)]\n    return [deck[i // 2 + (i % 2) * len(deck) // 2] for i in range(len(deck))]\n')]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),$=(0,s._)("h2",{id:"q10-add-trees",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#q10-add-trees","aria-hidden":"true"},"#"),(0,s.Uk)(" Q10: Add trees")],-1),ee=(0,s._)("p",null,"Define the function add_trees, which takes in two trees and returns a new tree where each corresponding node from the first tree is added with the node from the second tree. If a node at any particular position is present in one tree but not the other, it should be present in the new tree as well.",-1),ne=(0,s._)("div",{class:"custom-container info"},[(0,s._)("p",{class:"custom-container-title"},"Hint"),(0,s._)("p",null,"Hint: You may want to use the built-in zip function to iterate over multiple sequences at once."),(0,s._)("p",null,"Note: If you feel that this one's a lot harder than the previous tree problems, that's totally fine! This is a pretty difficult problem, but you can do it! Talk about it with other students, and come back to it if you need to.")],-1),ie=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,'def add_trees(t1, t2):\n    """\n    >>> numbers = tree(1,\n    ...                [tree(2,\n    ...                      [tree(3),\n    ...                       tree(4)]),\n    ...                 tree(5,\n    ...                      [tree(6,\n    ...                            [tree(7)]),\n    ...                       tree(8)])])\n    >>> print_tree(add_trees(numbers, numbers))\n    2\n      4\n        6\n        8\n      10\n        12\n          14\n        16\n    >>> print_tree(add_trees(tree(2), tree(3, [tree(4), tree(5)])))\n    5\n      4\n      5\n    >>> print_tree(add_trees(tree(2, [tree(3)]), tree(2, [tree(3), tree(4)])))\n    4\n      6\n      4\n    >>> print_tree(add_trees(tree(2, [tree(3, [tree(4), tree(5)])]), \\\n    tree(2, [tree(3, [tree(4)]), tree(5)])))\n    4\n      6\n        8\n        5\n      5\n    """\n    "*** YOUR CODE HERE ***"\n')]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),se=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,"暂时不想做，答案请参考<https://zhuanlan.zhihu.com/p/452584277>\n\n")]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),te=(0,s._)("h2",{id:"q11-successor-tables",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#q11-successor-tables","aria-hidden":"true"},"#"),(0,s.Uk)(" Q11: Successor Tables")],-1),le=(0,s._)("p",null,'Here\'s an incomplete definition of the build_successors_table function. The input is a list of words (corresponding to a Shakespearean text), and the output is a successors table. (By default, the first word is a successor to "."). See the example below.',-1),ae=(0,s._)("div",{class:"custom-container info"},[(0,s._)("p",{class:"custom-container-title"},"Hint"),(0,s._)("p",null,'Note: there are two places where you need to write code, denoted by the two "*** YOUR CODE HERE ***"')],-1),re=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,"def build_successors_table(tokens):\n    \"\"\"Return a dictionary: keys are words; values are lists of successors.\n\n    >>> text = ['We', 'came', 'to', 'investigate', ',', 'catch', 'bad', 'guys', 'and', 'to', 'eat', 'pie', '.']\n    >>> table = build_successors_table(text)\n    >>> sorted(table)\n    [',', '.', 'We', 'and', 'bad', 'came', 'catch', 'eat', 'guys', 'investigate', 'pie', 'to']\n    >>> table['to']\n    ['investigate', 'eat']\n    >>> table['pie']\n    ['.']\n    >>> table['.']\n    ['We']\n    \"\"\"\n    table = {}\n    prev = '.'\n    for word in tokens:\n        if prev not in table:\n            \"*** YOUR CODE HERE ***\"\n        \"*** YOUR CODE HERE ***\"\n        prev = word\n    return table\n")]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),ce=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,"def build_successors_table(tokens):\n    \"\"\"Return a dictionary: keys are words; values are lists of successors.\n\n    >>> text = ['We', 'came', 'to', 'investigate', ',', 'catch', 'bad', 'guys', 'and', 'to', 'eat', 'pie', '.']\n    >>> table = build_successors_table(text)\n    >>> sorted(table)\n    [',', '.', 'We', 'and', 'bad', 'came', 'catch', 'eat', 'guys', 'investigate', 'pie', 'to']\n    >>> table['to']\n    ['investigate', 'eat']\n    >>> table['pie']\n    ['.']\n    >>> table['.']\n    ['We']\n    \"\"\"\n    table = {}\n    prev = '.'\n    for word in tokens:\n        if prev not in table:\n            \"*** YOUR CODE HERE ***\"\n            table[prev] = []\n        \"*** YOUR CODE HERE ***\"\n        table[prev].append(word)\n        prev = word\n    return table\n")]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),de=(0,s._)("h2",{id:"q12-construct-the-sentence",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#q12-construct-the-sentence","aria-hidden":"true"},"#"),(0,s.Uk)(" Q12: Construct the Sentence")],-1),ue=(0,s._)("p",null,"Let's generate some sentences! Suppose we're given a starting word. We can look up this word in our table to find its list of successors, and then randomly select a word from this list to be the next word in the sentence. Then we just repeat until we reach some ending punctuation.",-1),oe=(0,s._)("div",{class:"custom-container info"},[(0,s._)("p",{class:"custom-container-title"},"Hint"),(0,s._)("p",null,"Hint: to randomly select from a list, import the Python random library with import random and use the expression random.choice(my_list)")],-1),_e=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,"def construct_sent(word, table):\n    \"\"\"Prints a random sentence starting with word, sampling from\n    table.\n\n    >>> table = {'Wow': ['!'], 'Sentences': ['are'], 'are': ['cool'], 'cool': ['.']}\n    >>> construct_sent('Wow', table)\n    'Wow!'\n    >>> construct_sent('Sentences', table)\n    'Sentences are cool.'\n    \"\"\"\n    import random\n    result = ''\n    while word not in ['.', '!', '?']:\n        \"*** YOUR CODE HERE ***\"\n    return result.strip() + word\n")]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),be=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,"def construct_sent(word, table):\n    \"\"\"Prints a random sentence starting with word, sampling from\n    table.\n\n    >>> table = {'Wow': ['!'], 'Sentences': ['are'], 'are': ['cool'], 'cool': ['.']}\n    >>> construct_sent('Wow', table)\n    'Wow!'\n    >>> construct_sent('Sentences', table)\n    'Sentences are cool.'\n    \"\"\"\n    import random\n    result = ''\n    while word not in ['.', '!', '?']:\n        \"*** YOUR CODE HERE ***\"\n        result += word + ' '\n        word = random.choice(table[word])\n    return result.strip() + word\n")]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),me={},ve=(0,i(3744).Z)(me,[["render",function(e,n){const i=(0,s.up)("ExternalLinkIcon"),me=(0,s.up)("CodeTabs");return(0,s.wg)(),(0,s.iD)("div",null,[t,l,(0,s._)("p",null,[a,(0,s._)("a",r,[c,(0,s.Wm)(i)])]),d,u,o,(0,s.Wm)(me,{data:[{title:"Question"},{title:"Answer"}],"tab-id":"Q1"},{tab0:(0,s.w5)((({title:e,value:n,isActive:i})=>[_])),tab1:(0,s.w5)((({title:e,value:n,isActive:i})=>[b])),_:1}),m,v,(0,s.Wm)(me,{data:[{title:"Question"},{title:"Answer"}],"tab-id":"Q2"},{tab0:(0,s.w5)((({title:e,value:n,isActive:i})=>[h])),tab1:(0,s.w5)((({title:e,value:n,isActive:i})=>[f])),_:1}),p,y,g,w,(0,s.Wm)(me,{data:[{title:"Question"},{title:"Answer"}],"tab-id":"Q3"},{tab0:(0,s.w5)((({title:e,value:n,isActive:i})=>[x])),tab1:(0,s.w5)((({title:e,value:n,isActive:i})=>[k])),_:1}),E,q,R,(0,s.Wm)(me,{data:[{title:"Question"}],"tab-id":"Q4"},{tab0:(0,s.w5)((({title:e,value:n,isActive:i})=>[C])),_:1}),D,Q,O,(0,s.Wm)(me,{data:[{title:"Question"},{title:"Answer"}],"tab-id":"Q5"},{tab0:(0,s.w5)((({title:e,value:n,isActive:i})=>[A])),tab1:(0,s.w5)((({title:e,value:n,isActive:i})=>[U])),_:1}),T,H,(0,s.Wm)(me,{data:[{title:"Question"},{title:"Answer"}],"tab-id":"Q6"},{tab0:(0,s.w5)((({title:e,value:n,isActive:i})=>[S])),tab1:(0,s.w5)((({title:e,value:n,isActive:i})=>[W])),_:1}),Y,L,K,N,(0,s.Wm)(me,{data:[{title:"Question"}],"tab-id":"Q7"},{tab0:(0,s.w5)((({title:e,value:n,isActive:i})=>[I])),_:1}),B,F,P,z,(0,s.Wm)(me,{data:[{title:"Question"},{title:"Answer"}],"tab-id":"Q8"},{tab0:(0,s.w5)((({title:e,value:n,isActive:i})=>[M])),tab1:(0,s.w5)((({title:e,value:n,isActive:i})=>[Z])),_:1}),j,V,J,(0,s.Wm)(me,{data:[{title:"Question"},{title:"Answer"}],"tab-id":"Q9"},{tab0:(0,s.w5)((({title:e,value:n,isActive:i})=>[G])),tab1:(0,s.w5)((({title:e,value:n,isActive:i})=>[X])),_:1}),$,ee,ne,(0,s.Wm)(me,{data:[{title:"Question"},{title:"Answer"}],"tab-id":"Q10"},{tab0:(0,s.w5)((({title:e,value:n,isActive:i})=>[ie])),tab1:(0,s.w5)((({title:e,value:n,isActive:i})=>[se])),_:1}),te,le,ae,(0,s.Wm)(me,{data:[{title:"Question"},{title:"Answer"}],"tab-id":"Q11"},{tab0:(0,s.w5)((({title:e,value:n,isActive:i})=>[re])),tab1:(0,s.w5)((({title:e,value:n,isActive:i})=>[ce])),_:1}),de,ue,oe,(0,s.Wm)(me,{data:[{title:"Question"},{title:"Answer"}],"tab-id":"Q12"},{tab0:(0,s.w5)((({title:e,value:n,isActive:i})=>[_e])),tab1:(0,s.w5)((({title:e,value:n,isActive:i})=>[be])),_:1})])}]])}}]);