"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[9815],{4292:(e,n,i)=>{i.r(n),i.d(n,{data:()=>s});const s=JSON.parse('{"key":"v-f39614ca","path":"/posts/Disc/Disc04.html","title":"CS61a DISC 4","lang":"zh-CN","frontmatter":{"icon":"edit","date":"2022-01-01T00:00:00.000Z","category":["CS61a"],"tag":["Disc"],"order":4,"summary":"--- icon: edit date: 2022-01-01 category:\\rCS61a; tag:\\rDisc; order: 4 --- CS61a DISC 4 Tree Recursion, Python Lists Link to this section: Q1: Count Stair Ways Imagine that you want ","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.mrhope.site/posts/Disc/Disc04.html"}],["meta",{"property":"og:site_name","content":"一个普通的网站"}],["meta",{"property":"og:title","content":"CS61a DISC 4"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-08-08T06:07:04.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:tag","content":"Disc"}],["meta",{"property":"article:published_time","content":"2022-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-08T06:07:04.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"Q1: Count Stair Ways","slug":"q1-count-stair-ways","children":[]},{"level":2,"title":"Q2: Count K","slug":"q2-count-k","children":[]},{"level":2,"title":"Q3: WWPD: Lists","slug":"q3-wwpd-lists","children":[]},{"level":2,"title":"Q4: Even weighted","slug":"q4-even-weighted","children":[]},{"level":2,"title":"Q5: Max Product","slug":"q5-max-product","children":[]}],"git":{"createdTime":1659336072000,"updatedTime":1659938824000,"contributors":[{"name":"LiPancake","email":"370981991@qq.com","commits":2}]},"readingTime":{"minutes":2.08,"words":624},"filePathRelative":"posts/Disc/Disc04.md","localizedDate":"2022年1月1日"}')},2486:(e,n,i)=>{i.r(n),i.d(n,{default:()=>E});var s=i(6252);const t=(0,s._)("h1",{id:"cs61a-disc-4",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#cs61a-disc-4","aria-hidden":"true"},"#"),(0,s.Uk)(" CS61a DISC 4")],-1),a=(0,s._)("h1",{id:"tree-recursion-python-lists",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#tree-recursion-python-lists","aria-hidden":"true"},"#"),(0,s.Uk)(" Tree Recursion, Python Lists")],-1),l=(0,s.Uk)("Link to this section: "),r={href:"https://inst.eecs.berkeley.edu/~cs61a/fa21/disc/disc04/",target:"_blank",rel:"noopener noreferrer"},u=(0,s.Uk)("https://inst.eecs.berkeley.edu/~cs61a/fa21/disc/disc04/"),d=(0,s._)("h2",{id:"q1-count-stair-ways",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#q1-count-stair-ways","aria-hidden":"true"},"#"),(0,s.Uk)(" Q1: Count Stair Ways")],-1),c=(0,s._)("p",null,"Imagine that you want to go up a flight of stairs that has n steps, where n is a positive integer. You can either take 1 or 2 steps each time. In this question, you'll write a function count_stair_ways that solves this problem. Before you code your approach, consider these questions.",-1),_=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,'def count_stair_ways(n):\n    """Returns the number of ways to climb up a flight of\n    n stairs, moving either 1 step or 2 steps at a time.\n    >>> count_stair_ways(4)\n    5\n    """\n    "*** YOUR CODE HERE ***"\n\n')]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),m=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,'def count_stair_ways(n):\n    """Returns the number of ways to climb up a flight of\n    n stairs, moving either 1 step or 2 steps at a time.\n    >>> count_stair_ways(4)\n    5\n    """\n    "*** YOUR CODE HERE ***"\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    else:\n        return count_stair_ways(n-1) + count_stair_ways(n-2)\n\n')]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),o=(0,s._)("h2",{id:"q2-count-k",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#q2-count-k","aria-hidden":"true"},"#"),(0,s.Uk)(" Q2: Count K")],-1),v=(0,s._)("p",null,"Consider a special version of the count_stair_ways problem, where instead of taking 1 or 2 steps, we are able to take up to and including k steps at a time. Write a function count_k that figures out the number of paths for this scenario. Assume n and k are positive.",-1),b=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,'def count_k(n, k):\n    """ Counts the number of paths up a flight of n stairs\n    when taking up to and including k steps at a time.\n    >>> count_k(3, 3) # 3, 2 + 1, 1 + 2, 1 + 1 + 1\n    4\n    >>> count_k(4, 4)\n    8\n    >>> count_k(10, 3)\n    274\n    >>> count_k(300, 1) # Only one step at a time\n    1\n    """\n    "*** YOUR CODE HERE ***"\n\n')]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),h=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,'def count_k(n, k):\n    """ Counts the number of paths up a flight of n stairs\n    when taking up to and including k steps at a time.\n    >>> count_k(3, 3) # 3, 2 + 1, 1 + 2, 1 + 1 + 1\n    4\n    >>> count_k(4, 4)\n    8\n    >>> count_k(10, 3)\n    274\n    >>> count_k(300, 1) # Only one step at a time\n    1\n    """\n    "*** YOUR CODE HERE ***"\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    else:\n        total = 0\n        for i in range(1, k+1):\n            total += count_k(n-i, k)\n        return total\n')]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),p=(0,s._)("h2",{id:"q3-wwpd-lists",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#q3-wwpd-lists","aria-hidden":"true"},"#"),(0,s.Uk)(" Q3: WWPD: Lists")],-1),g=(0,s._)("p",null,"What would Python display?",-1),x=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,">>> a = [1, 5, 4, [2, 3], 3]\n>>> print(a[0], a[-1])\n? 1 3\n\n>>>len(a)\n? 5\n\n>>> 2 in a\n? False\n\n>>> a[3][0]\n? 2\n")]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),f=(0,s._)("h2",{id:"q4-even-weighted",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#q4-even-weighted","aria-hidden":"true"},"#"),(0,s.Uk)(" Q4: Even weighted")],-1),w=(0,s._)("p",null,"Write a function that takes a list s and returns a new list that keeps only the even-indexed elements of s and multiplies them by their corresponding index.",-1),k=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,'def even_weighted(s):\n    """\n    >>> x = [1, 2, 3, 4, 5, 6]\n    >>> even_weighted(x)\n    [0, 6, 20]\n    """\n    return [_________________________________________________]\n\n')]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),y=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,'def even_weighted(s):\n    """\n    >>> x = [1, 2, 3, 4, 5, 6]\n    >>> even_weighted(x)\n    [0, 6, 20]\n    """\n    return [s[i] * i for i in range(6) if i % 2 == 0]\n')]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),C=(0,s._)("h2",{id:"q5-max-product",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#q5-max-product","aria-hidden":"true"},"#"),(0,s.Uk)(" Q5: Max Product")],-1),D=(0,s._)("p",null,"Write a function that takes in a list and returns the maximum product that can be formed using nonconsecutive elements of the list. The input list will contain only numbers greater than or equal to 1.",-1),Q=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,'def max_product(s):\n    """Return the maximum product that can be formed using\n    non-consecutive elements of s.\n    >>> max_product([10,3,1,9,2]) # 10 * 9\n    90\n    >>> max_product([5,10,5,10,5]) # 5 * 5 * 5\n    125\n    >>> max_product([])\n    1\n    """\n\n')]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),q=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,'def max_product(s):\n    """Return the maximum product that can be formed using\n    non-consecutive elements of s.\n    >>> max_product([10,3,1,9,2]) # 10 * 9\n    90\n    >>> max_product([5,10,5,10,5]) # 5 * 5 * 5\n    125\n    >>> max_product([])\n    1\n    """\n    if s == []:\n        return 1\n    else:\n        return max(max_product(s[1:]), s[0] * max_product(s[2:]))\n')]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"}),(0,s._)("div",{class:"line-number"})])],-1),W={},E=(0,i(3744).Z)(W,[["render",function(e,n){const i=(0,s.up)("ExternalLinkIcon"),W=(0,s.up)("CodeTabs");return(0,s.wg)(),(0,s.iD)("div",null,[t,a,(0,s._)("p",null,[l,(0,s._)("a",r,[u,(0,s.Wm)(i)])]),d,c,(0,s.Wm)(W,{data:[{title:"Question"},{title:"Answer"}],"tab-id":"Q1"},{tab0:(0,s.w5)((({title:e,value:n,isActive:i})=>[_])),tab1:(0,s.w5)((({title:e,value:n,isActive:i})=>[m])),_:1}),o,v,(0,s.Wm)(W,{data:[{title:"Question"},{title:"Answer"}],"tab-id":"Q2"},{tab0:(0,s.w5)((({title:e,value:n,isActive:i})=>[b])),tab1:(0,s.w5)((({title:e,value:n,isActive:i})=>[h])),_:1}),p,g,(0,s.Wm)(W,{data:[{title:"Question"}],"tab-id":"Q3"},{tab0:(0,s.w5)((({title:e,value:n,isActive:i})=>[x])),_:1}),f,w,(0,s.Wm)(W,{data:[{title:"Question"},{title:"Answer"}],"tab-id":"Q4"},{tab0:(0,s.w5)((({title:e,value:n,isActive:i})=>[k])),tab1:(0,s.w5)((({title:e,value:n,isActive:i})=>[y])),_:1}),C,D,(0,s.Wm)(W,{data:[{title:"Question"},{title:"Answer"}],"tab-id":"Q5"},{tab0:(0,s.w5)((({title:e,value:n,isActive:i})=>[Q])),tab1:(0,s.w5)((({title:e,value:n,isActive:i})=>[q])),_:1})])}]])}}]);